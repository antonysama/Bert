# the foll. is on Ubuntu bash : 
cd ~/environments/k/
bert-serving-start -model_dir=uncased_L-12_H-768_A-12

# if you want to ELMo-like contextual word embedding set -pooling_strategy NONE as so :
bert-serving-start -pooling_strategy NONE -model_dir=uncased_L-12_H-768_A-12

# the foll. is on Python :
Python

import os
import time
import GPUtil
import tensorflow as tf
from bert_serving.server import BertServer
# If you want embeddings that corresponds to every token, you can simply use slice index as follows:
max_seq_len = 25
pooling_strategy = NONE

# Chose one of the foll. for bc :
from bert_serving.client import BertClient
bc = BertClient()

# Or,
# First, make json text
import json
import urllib.request
connection = urllib.request.urlopen('http://python-data.dr-chuck.net/comments_220996.json')
js = connection.read()   #json encoded at uitf-8
info = json.loads(js.decode("utf-8"))  #parse it into a string

# Then, make  concurrent bc
from bert_serving.client import ConcurrentBertClient
os.environ['CUDA_VISIBLE_DEVICES'] = str(GPUtil.getFirstAvailable())
train_fp = js # not info  ?
batch_size = 128
num_parallel_calls = 4
num_clients = 8  
bc = ConcurrentBertClient()

# Or,
bc2 = [BertClient(show_server_config=False) for _ in range(num_clients)]

# If you want to use your own tokenizer to segment sentences instead of the default one from BERTencode(is_tokenized=True) on the client slide as follows:
texts2 = [s.split() for s in texts]
bc.encode(texts2, is_tokenized=True)  # remember to first run bc = BertClient()


def get_encodes(x):
    # x is `batch_size` of lines, each of which is a json object
    samples = [json.loads(l) for l in x]
    text = [s['fact'][-50:] for s in samples]
    features = bc.encode(text)
    labels = [0 for _ in text]
    return features, labels

data_node = (tf.data.TextLineDataset(train_fp).batch(batch_size)
             .map(lambda x: tf.py_func(get_encodes, [x], [tf.float32, tf.int64], name='bert_client'),
                  num_parallel_calls=num_parallel_calls)
             .map(lambda x, y: {'feature': x, 'label': y})
             .make_one_shot_iterator().get_next())

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    cnt, num_samples, start_t = 0, 0, time.perf_counter()
    while True:
        x = sess.run(data_node)
        cnt += 1
        num_samples += x['feature'].shape[0]
        if cnt % 10 == 0:
            time_used = time.perf_counter() - start_t
            print('data speed: %d/s' % int(num_samples / time_used))
            cnt, num_samples, start_t = 0, 0, time.perf_counter()
